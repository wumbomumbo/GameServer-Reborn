package Data;
syntax = "proto3";

// source filename: AuthData.proto

message UserIndirectData {
  optional string userId = 1;
  optional string telemetryId = 2;
}

message AnonymousUserData {
  optional bool isAnonymous = 1;
}

message TokenData {
  optional string sessionKey = 1;
  optional int64 expirationDate = 2;
}

message UsersResponseMessage {
  optional .Data.UserIndirectData user = 1;
  optional .Data.TokenData token = 2;
}

message LinkData {
  optional .Data.LinkData.identityType sourceType = 1;
  optional string sourceId = 2;
  optional .Data.LinkData.identityType destinationType = 3;
  optional string destinationId = 4;
  enum identityType {
    TNT_ID = 0;
    NUCLEUS_TOKEN = 1;
  };
}

message LinkUserResponseMessage {
  optional string userId = 1;
  optional string externalId = 2;
  optional string externalType = 3;
  optional .Data.ErrorMessage error = 4;
}

message DeleteUserResponseMessage {
  optional string userId = 1;
  optional .Data.ErrorMessage error = 2;
}



// source filename: ClientConfigData.proto


message ClientConfigResponse {
  repeated .Data.ClientConfigResponse.ClientConfigItem items = 2;
  message ClientConfigItem {
    optional int32 clientConfigId = 1;
    optional string name = 2;
    optional string value = 3;
  }
}



// source filename: ClientLog.proto


message ClientLogMessage {
  int64 time_stamp = 1;
  .Data.ClientLogMessage.Severity severity = 2;
  string source = 3;
  string text = 4;
  optional string userId = 5;
  optional .Data.ClientLogMessage.ConnectionType connectionType = 6;
  optional .Data.ClientLogMessage.ServerProvidedLogFields serverLogFields = 7;
  message ServerProvidedLogFields {
    optional int64 server_received_timestamp = 1;
    optional string server_received_datestamp = 2;
    optional string server_received_country_code = 3;
    optional string server_received_clientSessionGUID = 4;
  }
  enum Severity {
    WARN = 0;
    SEVERE = 1;
  };
  enum ConnectionType {
    WIFI = 0;
    MOBILE = 1;
    UNKNOWN = 2;
  };
}



// source filename: ClientMetrics.proto


message ClientMetricsMessage {
  .Data.ClientMetricsMessage.Type type = 1;
  string name = 2;
  int64 value = 3;
  enum Type {
    COUNTER = 0;
    HISTOGRAM = 1;
  };
}



// source filename: ClientTelemetry.proto


message ClientTelemetryMessage {
  optional .Data.ClientTelemetryMessage.ClientProvidedTelemetry clientProvidedTelemetry = 1;
  optional .Data.ClientTelemetryMessage.ServerProvidedTelemetry serverProvidedTelemetry = 2;
  repeated .Data.ClientTelemetryMessage.NimbleExtractedTelemetry nimbleProvidedTelemetry = 3;
  message ClientProvidedTelemetry {
    optional int64 timeStamp = 1;
    optional string userId = 2;
    optional .Data.ClientTelemetryIdentifier clientTelemetryId = 3;
    optional float fps_min = 4;
    optional float fps_max = 5;
    optional float fps_average = 6;
    repeated .Data.ClientApplicationGUID applicationGUIDs = 7;
    optional int64 sessionStartTimestamp = 8;
    repeated .Data.ClientAccountId userAccountIds = 9;
    optional .Data.SharedSessionGUID sharedSessionGUID = 10;
    optional int64 touchesDuringSession = 11;
    optional .Data.ClientTelemetryMessage.ClientProvidedTelemetry.MemoryStat totalAvailableMemory = 12;
    optional .Data.ClientTelemetryMessage.ClientProvidedTelemetry.MemoryStat freeMemory = 13;
    optional .Data.ClientTelemetryMessage.ClientProvidedTelemetry.MemoryStat usedMemory = 14;
    optional int64 physicalMemory = 15;
    optional int64 userMemory = 16;
    optional int64 sessionMismatchAskDisplayed = 17;
    optional int64 sessionMismatchConfirmDisplayed = 18;
    optional int64 sessionMismatchConfirmAccepted = 19;
    optional .Data.ClientTelemetryMessage.ClientProvidedTelemetry.DlcInfo dlcInfo = 20;
    message MemoryStat {
      optional int64 min = 1;
      optional int64 max = 2;
      optional float average = 3;
    }
    message DlcInfo {
      optional uint32 numPackageCrcChecksFailed = 1;
      optional uint32 numPackageDsaSignaturesInvalid = 2;
      optional uint32 numPackagesToDownload = 3;
      optional uint32 assetTierTargeted = 4;
      optional uint64 sizeExpectedKB = 5;
      optional uint64 sizeDownloadedKB = 6;
      optional float downloadTimeSeconds = 7;
      optional string downloadUrl = 8;
    }
  }
  message ServerProvidedTelemetry {
    optional int64 millisTimeStamp = 1;
    optional string authUserId = 2;
    optional string bgClientVersion = 3;
    optional string mhClientVersion = 4;
    optional string clientPlatform = 5;
    optional .Data.ServerTelemetryIdentifier serverTelemetryId = 6;
    optional string clientRequestCountryCode = 7;
    optional string dlcHashHeader = 8;
  }
  message NimbleExtractedTelemetry {
    optional string nimbleSessionId = 1;
  }
}

message ClientTelemetryIdentifier {
  optional string id = 1;
}

message ServerTelemetryIdentifier {
  optional string id = 1;
}

message ClientApplicationGUID {
  optional .Data.DeviceId deviceIdType = 1;
  optional string id = 2;
}

message ClientAccountId {
  optional .Data.ServiceAccountId idType = 1;
  optional string idValue = 2;
}

message SharedSessionGUID {
  optional .Data.SessionMessageType sessionMessageType = 1;
  optional .Data.ClientTelemetryIdentifier sessionIdentifier = 2;
}

enum ServiceAccountId {
  LAND_MAYHEM_ID = 1;
  TNT_ID = 2;
  SYNERGY_ID = 3;
  NUCLEUS_ID = 4;
  FACEBOOK_ID = 5;
};

enum SessionMessageType {
  DEFAULT_NONE = 1;
  START = 2;
  END = 3;
};


// source filename: Common.proto


message NameValue {
  optional string name = 1;
  optional string value = 2;
}

message NameValueSet {
  repeated .Data.NameValue nameValueSet = 1;
}



// source filename: CustomerServiceData.proto


message PlayerSession {
  optional string ownerId = 1;
  optional string hostname = 2;
}

message LandResponseMessage {
  optional .Data.LandMessage land = 1;
  optional .Data.PlayerSession session = 2;
  optional .Data.ErrorMessage error = 3;
}

message CurrencyResponseMessage {
  optional .Data.CurrencyData currency = 1;
  optional .Data.ErrorMessage error = 2;
}

message UserResponseMessage {
  optional string gameId = 1;
  repeated .Data.UserResponseMessage.ReverseMapping reverseMapping = 2;
  optional .Data.ErrorMessage error = 3;
  message ReverseMapping {
    optional string externalId = 1;
    optional string externalType = 2;
  }
}

message LandBackupResponseMessage {
  repeated .Data.LandBackupResponseMessage.LandBackup landBackup = 1;
  optional .Data.ErrorMessage error = 2;
  message LandBackup {
    optional uint64 date = 1;
    optional .Data.LandMessage land = 2;
  }
}

message WholeLandTokenResponseMessage {
  optional .Data.WholeLandTokenResponse tokenResponse = 1;
  optional .Data.ErrorMessage error = 2;
}



// source filename: Error.proto


message ErrorMessage {
  optional .Data.ErrorMessage.Code code = 1;
  optional .Data.ErrorMessage.Type type = 2;
  optional string field = 3;
  optional .Data.ErrorMessage.Severity severity = 4;
  optional string message = 5;
  enum Code {
    UNKNOWN_CODE = 1;
    UNAUTHORIZED = 401;
    NOT_FOUND = 404;
    CONFLICT = 409;
    INTERNAL_SERVER_ERROR = 500;
    NOT_IMPLEMENTED = 501;
    SERVICE_UNAVAILABLE = 503;
    HTTP_VERSION_NOT_SUPPORTED = 505;
    BAD_REQUEST = 400;
  };
  enum Type {
    UNKNOWN_ERROR = 1;
    AUTHENTICATION_ERROR = 2;
    NO_SUCH_METHOD = 3;
    NO_SUCH_RESOURCE = 4;
    MISSING_VALUE = 5;
    INVALID_VALUE = 6;
    VALUE_TOO_SMALL = 7;
    VALUE_TOO_LARGE = 8;
    RESOURCE_ALREADY_EXISTS = 9;
    METHOD_CALLED_TOO_OFTEN = 23;
    INVALID_PARAMETERS_FORMAT = 24;
    LOCK_REQUEST_FAILED_DUE_TO_TIMEOUT = 26;
    PROTOCOL_MISMATCH = 28;
    DATABASE_ERROR = 29;
    SERVICE_UNAVAILABLE_TYPE = 30;
    NOT_IMPLEMENTED_TYPE = 31;
    SERVER_ERROR = 32;
    SHARD_UNDER_MAINTENANCE = 34;
    PLUGIN_INACTIVE = 35;
  };
  enum Severity {
    LEVEL_DEBUG = 0;
    LEVEL_INFO = 1;
    LEVEL_WARN = 2;
    LEVEL_ERROR = 3;
    LEVEL_FATAL = 4;
  };
}



// source filename: GambleData.proto

message GambleResponse {
  optional .Data.CurrencyData updatedCurrency = 1;
  optional int32 currencyAwarded = 2;
  optional .Data.ErrorMessage error = 3;
}



// source filename: GameplayConfigData.proto

message GameplayConfigResponse {
  repeated .Data.NameValue item = 1;
  optional .Data.ErrorMessage error = 2;
}



// source filename: GetFriendData.proto


message GetFriendDataRequest {
  repeated string friendId = 1;
}

message GetFriendDataResponse {
  repeated .Data.GetFriendDataResponse.FriendDataPair friendData = 1;
  optional .Data.ErrorMessage error = 2;
  message FriendDataPair {
    optional string friendId = 1;
    optional .Data.LandMessage.FriendData friendData = 2;
    optional .Data.GetFriendDataResponse.FriendDataPair.FriendDataError error = 3;
    optional .Data.GetFriendDataResponse.FriendDataPair.AuthService authService = 4;
    optional string externalId = 5;
    message FriendDataError {
      optional int32 code = 1;
      optional string type = 2;
    }
    enum AuthService {
      NUCLEUS = 0;
      FACEBOOK = 1;
    };
  }
}



// source filename: LandData.proto

message VariableSet {
  repeated .Data.VariableSet.Variable variable = 1;
  message Variable {
    optional string name = 1;
    optional int32 value = 2;
    optional double dvalue = 3;
  }
}

message SharedVariableSet {
  repeated .Data.SharedVariableSet.SharedVariable variable = 1;
  message SharedVariable {
    optional uint32 owner = 1;
    optional int32 id = 2;
    optional int32 value = 3;
  }
}

message TimeGateSet {
  repeated .Data.TimeGateSet.TimeGate timegate = 1;
  message TimeGate {
    optional int32 gateId = 1;
    optional int32 usesRemaining = 2;
    optional int64 refillTime = 3;
    optional string instanceId = 4;
    optional int32 lastRefillCount = 5;
  }
}

message AdvancedVariableSet {
  repeated .Data.AdvancedVariableSet.AdvancedVariable variable = 1;
  message AdvancedVariable {
    optional string name = 1;
    optional string value = 2;
    optional int64 createdTime = 3;
    optional int64 ttl = 4;
    optional uint32 objectClass = 5;
    optional uint32 serverID = 6;
    optional uint32 objectTypeID = 7;
    optional bool orphaned = 8;
    optional bool canBeOrphaned = 9;
    optional int32 scope = 10;
    optional uint32 sublandID = 11;
    optional uint32 flags = 12;
    optional uint32 uuid = 13;
  }
}

message TimedAttackData {
  optional string instanceID = 1;
  optional uint32 subLandID = 2;
  optional uint32 objectServerID = 3;
  optional uint32 objectClass = 4;
  optional string objectOwner = 5;
  optional string attackOwner = 6;
  optional int64 timeCreated = 7;
  optional int64 lifeSpan = 8;
  optional uint32 flag = 9;
  optional uint32 eventID = 10;
  optional int32 numResUsed = 11;
  optional uint32 objectID = 12;
}

message TimedAttackDataSet {
  repeated .Data.TimedAttackData timedAttackData = 1;
}

message ObjectVariables {
  optional .Data.AdvancedVariableSet variables = 1;
}

message SpendableElement {
  optional uint32 type = 1;
  optional uint32 amount = 2;
  optional int64 nextTime = 3;
}

message OwnerList {
  optional string id = 1;
  repeated string userName = 2;
}

message CurrencySaveData {
  optional uint32 money = 1;
  optional uint32 premium = 2;
  optional uint32 realMoney = 3;
  optional uint32 realPremium = 4;
  optional uint32 numSpecial = 5;
  repeated uint32 specialType = 6;
  repeated uint32 specialAmount = 7;
}

message LandMessage {
  optional string id = 1;
  optional .Data.LandMessage.FriendData friendData = 2;
  optional .Data.LandMessage.UserData userData = 3;
  optional .Data.LandMessage.InnerLandData innerLandData = 4;
  optional .Data.LandMessage.TerrainData roadsData = 5;
  optional .Data.LandMessage.TerrainData riversData = 6;
  repeated .Data.LandMessage.BuildingData buildingData = 7;
  repeated .Data.LandMessage.CharacterData characterData = 8;
  repeated .Data.LandMessage.ConsumableData consumableData = 9;
  repeated .Data.LandMessage.JobData jobData = 10;
  repeated .Data.LandMessage.QuestData questData = 11;
  repeated .Data.LandMessage.NotificationData notificationData = 12;
  repeated .Data.LandMessage.InventoryItemData inventoryItemData = 13;
  repeated .Data.LandMessage.MemorabiliaItemData memorabiliaItemData = 14;
  repeated .Data.LandMessage.PremiumUnlockItemData premiumUnlockItemData = 15;
  repeated .Data.LandMessage.EventCountListData eventCountListData = 16;
  repeated .Data.LandMessage.ActionLimitData actionLimitData = 17;
  optional .Data.LandMessage.SidebarData sidebarData = 18;
  optional .Data.LandMessage.CharacterSetsData characterSetsData = 19;
  repeated .Data.LandMessage.PushNotificationsData pushNotificationsData = 20;
  repeated .Data.LandMessage.TimedScriptData timedScriptData = 21;
  optional .Data.LandMessage.BonusUnlocksData bonusUnlocksData = 22;
  repeated .Data.LandMessage.CharacterUnlocksData characterUnlocksData = 23;
  optional .Data.LandMessage.SkinUnlocksData skinUnlocksData = 24;
  repeated .Data.LandMessage.DelayedActionData delayedActionData = 25;
  optional .Data.LandMessage.SpendablesData spendablesData = 26;
  optional .Data.LandMessage.SpecialEventsData specialEventsData = 27;
  optional .Data.LandMessage.FakeFriendData fakeFriendData = 28;
  repeated .Data.LandMessage.QuestGroupData questGroupData = 29;
  repeated .Data.PurchasedItemData purchases = 30;
  optional .Data.LandMessage.ProcessedPurchaseData processedPurchaseData = 31;
  repeated .Data.LandMessage.CustomFriendActionData customFriendActionData = 32;
  optional bool debugLand = 33;
  optional .Data.LandMessage.TerrainData oceanData = 34;
  optional .Data.LandMessage.GameObjectInfo gameObjectInfo = 35;
  repeated .Data.LandMessage.SubLandData subLandData = 36;
  repeated .Data.LandMessage.MinigameData minigameData = 37;
  repeated .Data.LandMessage.BuildingData stealableBuildingData = 38;
  repeated .Data.LandMessage.CollectionItemsData collectionItemsData = 39;
  repeated .Data.LandMessage.FriendListData friendListData = 40;
  optional .Data.LandMessage.FriendActionCount allFriendActionsCount = 41;
  optional bool friendListDataIsCreatedAndSaved = 42;
  optional .Data.ObjectVariables objectVariables = 43;
  repeated .Data.LandMessage.SavedRecommendations recommendations = 44;
  repeated .Data.LandMessage.AmazonDimension amazonDimensionSet = 45;
  optional .Data.LandMessage.DailyTaskMessage dailyTaskDataList = 46;
  optional .Data.LandMessage.RoadMapDataMessage roadMapDataMessage = 47;
  repeated .Data.LandMessage.AdHocObjectData adHocObjectData = 48;
  optional string countryCode = 49;
  repeated .Data.LandMessage.TimerData timerData = 50;
  optional .Data.LandMessage.JobCensusDataMessage jobCensusDataMessage = 51;
  optional .Data.LandMessage.DNAMessage dnaMessage = 52;
  optional .Data.LandMessage.GroupStorageBundleMessage groupStorageBundleMessage = 53;
  message FriendData {
    optional int32 dataVersion = 1;
    optional bool hasLemonTree = 2;
    optional int32 language = 3;
    optional int32 level = 4;
    optional string name = 5;
    optional int32 rating = 6;
    repeated .Data.SpendableElement spendable = 7;
    optional int32 landVersion = 8;
    repeated .Data.LandMessage.FriendData.SublandInfo sublandInfos = 9;
    optional int32 boardwalkTileCount = 10;
    optional int64 lastPlayedTime = 11;
    optional .Data.SharedVariableSet sharedVariableSet = 12;
    message SublandInfo {
      optional int32 sublandId = 1;
      optional int32 rating = 2;
      optional bool created = 3 [default = false];
    }
  }
  message EntityHeader {
    optional uint32 id = 1;
  }
  message UserData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint64 lastBonusCollection = 2;
    optional uint32 level = 3;
    optional uint32 experience = 4;
    optional uint32 money = 5;
    repeated .Data.LandMessage.UserData.SavedRating savedRating = 6;
    optional uint32 lastBonus = 7;
    optional bool friendsUnlocked = 8;
    optional bool memorabiliaUnlocked = 9;
    optional bool reorganizeUnlocked = 10;
    optional bool firstPurchase = 11;
    optional bool sidebarDefaultOpen = 12;
    optional bool showLevelUp = 13;
    optional uint32 bonusExperience = 14;
    optional uint32 bonusLevel = 15;
    optional bool hasPrestigeData = 16;
    optional uint32 prestigeID = 17;
    optional bool prestigeShownFirst = 18;
    optional bool prestigeShownSecond = 19;
    optional bool prestigeShownThird = 20;
    optional uint32 prestigeSelected = 21;
    optional uint32 prestigeConsumbableID = 22;
    optional bool tutorialComplete = 23;
    optional uint32 pendingConsumable = 24;
    optional uint32 visualLevel = 25;
    optional int32 timezoneOffset = 26;
    optional uint32 userPreferences = 27;
    optional bool shouldAnalyze = 28;
    optional int32 gambleOutcomeID = 29;
    optional string gambleItemType = 30;
    optional bool fullDLCCompleted = 31;
    optional .Data.PowerupMessage powerupDataList = 32;
    repeated .Data.SubscriptionData subscriptions = 33;
    repeated .Data.LandMessage.UserData.StickerUnlockData stickerUnlockData = 34;
    optional bool resetAge = 35;
    message SavedRating {
      optional uint32 savedRatingElemID = 1;
      optional int32 savedRatingElem = 2;
    }
    message StickerUnlockData {
      optional uint32 stickerID = 1;
    }
  }
  message InnerLandData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional string landBlocks = 2;
    optional uint32 nextInstanceID = 3;
    optional uint32 numChars = 4;
    optional uint32 numBuildings = 5;
    optional uint32 numConsumables = 6;
    optional uint32 numJobs = 7;
    optional uint32 numQuests = 8;
    optional uint32 numNotices = 9;
    optional uint32 numInventoryItems = 10;
    optional uint32 numMemorabiliaItems = 11;
    optional uint32 numEventCountLists = 12;
    optional uint32 numPremiumUnlocks = 13;
    optional uint32 numActionLimits = 14;
    optional uint32 numRunsSincePromotion = 15;
    optional uint32 levelOfRateAsk = 16;
    optional int64 updateTime = 17;
    optional int64 timeSpentPlaying = 18;
    optional int64 lastLevelUpSpentTime = 19;
    optional int64 lastLevelUpTimeStamp = 20;
    optional bool initialSaveDone = 21;
    optional int64 lastVandalismFeedPosted = 22;
    optional int64 lastStealBuildingFeedPosted = 23;
    optional int64 lastSideshowBobSpawned = 24;
    optional uint32 nextCurrencyID = 25;
    optional uint32 numQuestGroups = 26;
    optional int32 scratcherRewardIndex = 27;
    optional uint32 scratcherRewardConsumableID = 28;
    optional uint64 creationTime = 29;
    repeated string versions = 30;
    optional bool buildingsSorted = 31;
    optional uint32 numSavedFriends = 32;
    optional uint32 landBlockWidth = 33;
    optional uint32 landBlockHeight = 34;
    optional int32 landBlockPositionX = 35;
    optional int32 landBlockPositionY = 36;
  }
  message TerrainData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint32 mapDataSize = 2;
    optional string mapData = 3;
    optional .Data.LandMessage.TerrainData.TerrainType terrainType = 4;
    enum TerrainType {
      PAVEMENT = 1;
      ROADS = 2;
      RIVERS = 3;
      KRUSTYLAND_ROADS = 4;
      OCEAN = 5;
      DIRT = 6;
      DIRT_ROADS = 7;
      COBBLESTONE = 8;
      ICERIVER = 9;
      KLSROAD = 10;
      GOLDROAD = 11;
      SAND = 12;
    };
  }
  message BuildingData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint32 building = 2;
    optional int64 creationTime = 3;
    optional int64 updateTime = 4;
    optional float positionX = 5;
    optional float positionY = 6;
    optional bool flipped = 7;
    optional int32 buildState = 8;
    optional bool hurry = 9;
    optional uint32 cropState = 10;
    optional bool betActive = 11;
    optional int64 betStartTime = 12;
    optional uint32 betChoice = 13;
    optional bool winningBet = 14;
    optional bool vandalized = 15;
    optional int32 namelen = 16;
    optional string vandalName = 17;
    optional bool isOwnerList = 18;
    optional .Data.OwnerList ownerList = 19;
    optional int32 skin = 20;
    optional bool grantRewards = 21;
    optional uint32 flipState = 22;
    optional uint32 subLandID = 23;
    optional int64 timeOfVandalism = 24;
    optional uint32 flags = 25;
  }
  message VectorFloat {
    optional float x = 1;
    optional float y = 2;
  }
  message VectorFloatArray {
    repeated .Data.LandMessage.VectorFloat vector = 1;
  }
  message CharacterData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint32 character = 2;
    optional int64 updateTime = 3;
    optional float positionX = 4;
    optional float positionY = 5;
    optional int32 skin = 6;
    optional int32 skinBackup = 7;
    optional uint32 subLandID = 8;
    optional uint32 flags = 9;
    optional .Data.LandMessage.VectorFloatArray pathCache = 10;
  }
  message ConsumableData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint32 consumable = 2;
    optional int64 consumedTime = 3;
  }
  message JobData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint32 job = 2;
    optional uint32 charRef = 3;
    optional uint32 buildingRef = 4;
    optional int64 updateTime = 5;
    optional int32 state = 6;
    optional bool hurry = 7;
    optional bool hasBuilding = 8;
    optional bool hasChar = 9;
    optional uint32 moveToCharRef = 10;
    optional bool proxyCheckFired = 11;
    optional int32 gridPositionX = 12;
    optional int32 gridPositionY = 13;
    optional bool hasGrid = 14;
    optional uint32 subLandID = 15;
    optional uint32 subBuildingRef = 16;
  }
  message QuestData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint32 questID = 2;
    optional int32 questState = 3;
    optional int32 questScriptState = 4;
    optional int32 numObjectives = 5;
    repeated .Data.LandMessage.QuestData.ObjectiveData objectiveData = 6;
    optional int32 timesCompleted = 7;
    message ObjectiveData {
      optional int32 objectiveID = 1;
      optional int32 objectiveState = 2;
      optional int32 objectiveType = 3;
      optional int32 version = 4;
      optional bool questLastRetVal = 5;
      optional bool questLocal = 6;
      optional bool rushed = 7;
      optional bool keepDone = 8;
      optional bool blockDoneScript = 9;
      optional .Data.LandMessage.QuestData.ObjectiveData.BuildingCustomData buildingCustomData = 10;
      optional .Data.LandMessage.QuestData.ObjectiveData.ResourcesCustomData resourcesCustomData = 11;
      optional .Data.LandMessage.QuestData.ObjectiveData.ItemCountCustomData itemCountCustomData = 12;
      optional .Data.LandMessage.QuestData.ObjectiveData.VisitFriendCustomData visitFriendCustomData = 13;
      optional .Data.LandMessage.QuestData.ObjectiveData.DynamicData dynamicData = 14;
      message BuildingCustomData {
        optional int32 qty = 1;
      }
      message ResourcesCustomData {
        optional uint32 money = 1;
        optional uint32 premium = 2;
      }
      message ItemCountCustomData {
        optional int32 count = 1;
      }
      message VisitFriendCustomData {
        optional int32 num = 1;
        optional bool fakeIncluded = 2;
        repeated string friend = 3;
      }
      message DynamicData {
        optional int32 value = 1;
      }
    }
  }
  message NotificationData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint32 buildingID = 2;
    optional uint32 characterID = 3;
    optional uint32 type = 4;
    optional uint32 callbackID = 5;
    optional float startX = 6;
    optional float startY = 7;
    optional float startZ = 8;
    optional float endX = 9;
    optional float endY = 10;
    optional float endZ = 11;
    optional int64 moveTime = 12;
    optional bool isStatic = 13;
    optional bool isSetup = 14;
    optional bool hasBuilding = 15;
    optional bool hasChar = 16;
    optional uint32 historyType = 17;
    optional uint32 historyJobID = 18;
    optional uint32 historyBuildingID = 19;
    optional uint32 historyCharacterID = 20;
    optional uint32 historyQuestID = 21;
    optional uint32 historyBuildingInstanceID = 22;
    optional .Data.LandMessage.NotificationData.ConsumableCallback consumableCallback = 23;
    optional .Data.LandMessage.NotificationData.MemorabiliaRewardCallback memorabiliaRewardCallback = 24;
    optional .Data.LandMessage.NotificationData.NotificationCallback notificationCallback = 25;
    optional .Data.LandMessage.NotificationData.GainCharacterRewardCallback gainCharacterRewardCallback = 26;
    optional .Data.LandMessage.NotificationData.GainPrizeRewardCallback gainPrizeRewardCallback = 27;
    optional .Data.LandMessage.NotificationData.MultiRewardCallback multiRewardCallback = 28;
    optional .Data.LandMessage.NotificationData.ResourceAndItemRewardCallback resourceAndItemRewardCallback = 29;
    optional uint32 subLandID = 30;
    optional uint32 historyCharacterInstanceID = 31;
    message ConsumableCallback {
      optional uint32 consumableID = 1;
      optional int32 sourceLength = 2;
      optional string source = 3;
      optional uint32 consumableCount = 4;
    }
    message MemorabiliaRewardCallback {
      optional uint32 memorabiliaID = 1;
    }
    message NotificationCallback {
      optional uint32 money = 1;
      optional uint32 premiumCurrency = 2;
      optional uint32 exp = 3;
      optional int32 sourceLength = 4;
      optional string source = 5;
      optional int32 reasonLength = 6;
      optional string reason = 7;
      optional int32 spendablesLen = 8;
      optional string spendables = 9;
    }
    message GainCharacterRewardCallback {
      optional uint32 buildingID = 1;
      optional uint32 characterID = 2;
      optional uint32 characterCount = 3;
      optional int32 sourceLength = 4;
      optional string source = 5;
    }
    message GainPrizeRewardCallback {
      optional uint32 specialEventID = 1;
      optional uint32 prizeListIndex = 2;
    }
    message MultiRewardCallback {
      optional uint32 money = 1;
      optional uint32 premiumCurrency = 2;
      optional uint32 exp = 3;
      optional int32 sourceLength = 4;
      optional string source = 5;
      optional int32 reasonLength = 6;
      optional string reason = 7;
      optional uint32 buildingID = 8;
      optional uint32 characterID = 9;
      optional float positionX = 10;
      optional float positionY = 11;
      optional float positionZ = 12;
      optional int32 spendablesLen = 13;
      optional string spendables = 14;
      optional uint32 consumableID = 15;
      optional uint32 consumableCount = 16;
      optional int32 floatTextLength = 17;
      optional string floatText = 18;
    }
    message ResourceAndItemRewardCallback {
      optional uint32 money = 1;
      optional uint32 premiumCurrency = 2;
      optional uint32 exp = 3;
      optional int32 sourceLength = 4;
      optional string source = 5;
      optional int32 reasonLength = 6;
      optional string reason = 7;
      optional uint32 buildingID = 8;
      optional uint32 characterID = 9;
      optional int32 spendablesLen = 10;
      optional string spendables = 11;
      optional uint32 rewardBuildingID = 12;
      optional uint32 rewardConsumableID = 13;
      optional int32 floatTextLength = 14;
      optional string floatText = 15;
      optional int32 flags = 16;
    }
  }
  message InventoryItemData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional int32 itemType = 2;
    optional int32 itemID = 3;
    optional int32 count = 4;
    optional bool isOwnerList = 5;
    optional .Data.OwnerList ownerList = 6;
    optional int32 fromLand = 7;
    optional int32 sourceLen = 8;
    optional string source = 9;
  }
  message MemorabiliaItemData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint32 itemID = 2;
    optional uint32 count = 3;
  }
  message PremiumUnlockItemData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint32 itemID = 2;
    optional int32 itemType = 3;
  }
  message EventCountListData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional int32 numElements = 2;
    repeated .Data.LandMessage.EventCountListData.Event event = 3;
    message Event {
      optional int32 count = 1;
      optional int32 type = 2;
      optional int32 jobID = 3;
      optional int32 charID = 4;
      optional int32 buildID = 5;
      optional int32 consumeID = 6;
      optional int32 buildingID = 7;
      optional int32 friendLand = 8;
      optional int32 characterID = 9;
      optional int32 arg1 = 10;
      optional int64 updatedAt = 11;
    }
  }
  message ActionLimitData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional string name = 2;
    optional int64 time = 3;
    optional int32 count = 4;
    optional int32 special = 5;
    optional bool fakeFriend = 6;
  }
  message SidebarData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional int32 numSidebarElements = 2;
    repeated .Data.LandMessage.SidebarData.SidebarElement sidebarElement = 3;
    message SidebarElement {
      optional int32 type = 1;
      optional int32 identifier = 2;
      optional int32 state = 3;
      optional int64 updateTime = 4;
    }
  }
  message CharacterSetsData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional int32 numCompleteSets = 2;
    repeated .Data.LandMessage.CharacterSetsData.CharacterSet characterSet = 3;
    message CharacterSet {
      optional int32 length = 1;
      optional string name = 2;
    }
  }
  message PushNotificationsData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional int32 type = 2;
    optional int32 pushIDLength = 3;
    optional string pushID = 4;
    optional bool hasSource = 5;
    optional uint32 source = 6;
  }
  message TimedScriptData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional int64 creationTime = 2;
    optional int32 waitTime = 3;
    optional int32 scriptnamelen = 4;
    optional int32 scriptpackagelen = 5;
    optional string scriptname = 6;
    optional string scriptpackage = 7;
    optional int32 scriptobjnamelen = 8;
    optional string scriptobjname = 9;
    optional int32 entityID = 10;
    optional uint32 flags = 11;
  }
  message BonusUnlocksData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional int32 numEntries = 2;
    repeated .Data.LandMessage.BonusUnlocksData.BonusEntry bonusEntry = 3;
    message BonusEntry {
      optional int32 id = 1;
      optional bool value = 2;
    }
  }
  message CharacterUnlocksData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint32 characterID = 2;
  }
  message SkinUnlocksData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional int32 skinUnlockLen = 2;
    optional string skinUnlock = 3;
    optional int32 skinReceivedLen = 4;
    optional string skinReceived = 5;
  }
  message DelayedActionData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional int32 type = 2;
    optional int32 sourceLen = 3;
    optional string source = 4;
    optional int32 reasonLen = 5;
    optional string reason = 6;
    optional .Data.LandMessage.DelayedActionData.RewardData rewardData = 7;
    message RewardData {
      optional uint32 money = 1;
      optional uint32 exp = 2;
      optional uint32 premium = 3;
    }
  }
  message SpendablesData {
    optional .Data.LandMessage.EntityHeader header = 1;
    repeated .Data.SpendableElement spendable = 2;
  }
  message TimedCharacterDataSet {
    repeated .Data.LandMessage.TimedCharacterDataSet.TimedCharacterData timedCharacterData = 1;
    message TimedCharacterData {
      optional .Data.LandMessage.EntityHeader header = 1;
      optional uint32 timedCharacterInstanceIDLen = 2;
      optional string timedCharacterInstanceID = 3;
      optional uint32 characterID = 4;
      optional uint32 subLandID = 5;
      optional uint32 characterOwnerLen = 6;
      optional string characterOwner = 7;
      optional uint32 landOwnerLen = 8;
      optional string landOwner = 9;
      optional int64 timeCreated = 10;
      optional int64 lifeSpan = 11;
      optional uint32 flag = 12;
    }
  }
  message BankDataSet {
    repeated .Data.LandMessage.BankDataSet.BankData bankData = 1;
    message Deposit {
      optional .Data.CurrencySaveData cost = 1;
      optional uint32 depositedByIDLen = 2;
      optional string depositedByID = 3;
      optional int64 depositedAt = 4;
      optional uint32 buildingRef = 5;
    }
    message DepositData {
      repeated .Data.LandMessage.BankDataSet.Deposit depositData = 1;
    }
    message BankData {
      optional .Data.LandMessage.EntityHeader header = 1;
      optional uint32 buildingRef = 2;
      optional uint32 subLandID = 3;
      optional uint32 bankID = 4;
      optional .Data.LandMessage.BankDataSet.DepositData deposits = 6;
    }
  }
  message SpecialEventsData {
    optional .Data.LandMessage.EntityHeader header = 1;
    repeated .Data.LandMessage.SpecialEventsData.SpecialEvent specialEvent = 2;
    message SpecialEvent {
      optional uint32 id = 1;
      optional int64 updateTime = 4;
      optional .Data.VariableSet variables = 5;
      optional .Data.LandMessage.SpecialEventsData.SpecialEvent.SpecialEventPrizeDataSet prizeDataSet = 6;
      optional .Data.LandMessage.TimedCharacterDataSet timedCharacterDataSet = 7;
      optional .Data.LandMessage.BankDataSet bankDataSet = 8;
      optional .Data.TimedAttackDataSet timedAttackDataSet = 9;
      optional .Data.TimeGateSet timeGateSet = 10;
      optional .Data.LandMessage.SpecialEventsData.SpecialEvent.GeneralBufferSets generalBuffers = 11;
      message SpecialEventPrizeDataSet {
        repeated .Data.LandMessage.SpecialEventsData.SpecialEvent.SpecialEventPrizeDataSet.SpecialEventPrizeData prizeData = 1;
        message SpecialEventPrizeData {
          optional .Data.LandMessage.EntityHeader header = 1;
          optional uint32 prizeListID = 2;
          optional uint32 nextPrize = 3;
          optional float prizeChance = 4;
          optional bool nextPrizeRushed = 5;
          optional int64 nextResetTime = 6;
        }
      }
      message GeneralBufferSets {
        repeated .Data.LandMessage.SpecialEventsData.SpecialEvent.GeneralBufferSets.BufferSet bufferSet = 1;
        message BufferSet {
          optional int32 id = 1;
          repeated bytes buffers = 2;
        }
      }
    }
  }
  message FakeFriendData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional int32 townLevel = 2;
    optional int32 buildingLen = 3;
    optional string building = 4;
    optional int32 actionTypeLen = 5;
    optional string actionType = 6;
    optional int64 actionTimeLen = 7;
    optional string actionTime = 8;
  }
  message QuestGroupData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint32 questGroupID = 2;
    optional int32 questGroupState = 3;
    optional int32 currentChild = 4;
    optional int32 lastChild = 5;
    optional int32 numChildren = 6;
    optional int32 childIDListLen = 7;
    optional int32 weightListLen = 8;
    optional string childIDList = 9;
    optional string weightList = 10;
    optional uint32 numCompleteDaily = 11;
    optional int64 dailyCompletionTime = 12;
  }
  message ProcessedPurchaseData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional string idAndCountList = 2;
    optional int32 idAndCountListLen = 3;
  }
  message CustomFriendActionData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint32 buildingInstance = 2;
    optional string friendName = 3;
    optional int32 friendNameLen = 4;
    optional string actionType = 5;
    optional int32 actionTypeLen = 6;
    optional bool isBuilding = 7;
  }
  message GameObjectInfo {
    optional .Data.LandMessage.EntityHeader header = 1;
    repeated .Data.LandMessage.GameObjectInfo.GameObject gameObject = 2;
    message GameObject {
      optional uint32 dataId = 1;
      optional uint32 gameObjectType = 2;
      optional int64 unlockTime = 3;
      optional bool locked = 4;
      optional bool viewed = 5;
    }
  }
  message SubLandData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint32 subLandID = 2;
    optional string landBlocks = 3;
    repeated .Data.LandMessage.TerrainData terrainData = 4;
    optional bool buildingsSorted = 5;
    optional uint32 landBlockWidth = 6;
    optional uint32 landBlockHeight = 7;
    optional int32 landBlockPositionX = 8;
    optional int32 landBlockPositionY = 9;
  }
  message MinigameData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint32 minigameID = 2;
    optional uint32 buildingRefID = 3;
    optional uint32 state = 4;
    optional int64 updateTime = 5;
    optional string prizeList = 6;
    optional int32 prizeListLen = 7;
    optional string tappedIndecies = 8;
    optional int32 tappedIndeciesLen = 9;
  }
  message CollectionItemsData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint32 itemID = 2;
    optional uint32 count = 3;
    optional uint32 visualCount = 4;
  }
  message FriendListData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional string friendID = 2;
    optional bool hideInMap = 3;
    optional bool hasBeenVisited = 4;
    optional bool isOrigin = 5;
  }
  message FriendActionCount {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional int64 time = 2;
    optional int32 count = 3;
    optional int32 special = 4;
  }
  message SavedRecommendations {
    optional int32 reccomendationType = 1;
    optional string entryName = 2;
    optional int32 sublandID = 3;
    optional int64 time = 4;
    optional string characterName = 5;
    optional int32 number = 6;
    optional string extraName = 7;
    optional float popularityTime = 8;
  }
  message AmazonDimension {
    optional .Data.LandMessage.AmazonDimension.AmazonDimensionType amazonDimensionType = 1;
    optional string amazonDimensionName = 2;
    optional string amazonDimensionValue = 3;
    enum AmazonDimensionType {
      AMAZON_DIMENSION_TYPE_STRING = 1;
      AMAZON_DIMENSION_TYPE_NUMBER = 2;
    };
  }
  message DailyTaskMessage {
    optional int32 numTasksCompleted = 1;
    optional int64 lastCancel = 2;
    optional int32 numTasksQueued = 3;
    optional string taskSetName = 4;
    repeated .Data.LandMessage.DailyTaskMessage.DailyTaskData taskDataList = 5;
    optional int64 lastViewed = 6;
    repeated .Data.LandMessage.DailyTaskMessage.DailyTaskCoolDownData TaskCoolDownList = 7;
    optional int64 lastTimeTaskAdded = 8;
    repeated .Data.LandMessage.DailyTaskMessage.DailyTaskRewardCoolDownData rewardCooldownList = 9;
    optional uint32 activeMetaRewardID = 10;
    optional uint32 queuedTask = 11;
    optional int64 lastTimeTaskCompleted = 12;
    optional int64 totalChallengesCompleted = 13;
    optional int64 totalTasksCompleted = 14;
    message DailyTaskData {
      optional uint32 questID = 1;
      optional int64 timeStarted = 2;
      optional int64 timeFinished = 3;
      optional uint32 rewardID = 4;
      optional uint32 menuSlot = 5;
    }
    message DailyTaskCoolDownData {
      optional uint32 questID = 1;
      optional int64 cooldownExpireTime = 2;
    }
    message DailyTaskRewardCoolDownData {
      optional uint32 rewardID = 1;
      optional int64 cooldownExpireTime = 2;
    }
  }
  message RoadMapDataMessage {
    repeated .Data.LandMessage.TerrainData roadMapList = 1;
  }
  message AdHocObjectData {
    optional .Data.LandMessage.EntityHeader header = 1;
    optional uint32 identifier = 2;
  }
  message TimerData {
    optional string name = 1;
    optional double deltaTime = 2;
    optional int64 startTime = 3;
    optional int64 endTime = 4;
    optional int64 expiryTime = 5;
    optional bool paused = 6;
  }
  message JobCensusDataMessage {
    repeated .Data.LandMessage.JobCensusDataMessage.JobCensusData jobCensusData = 1;
    message JobCensusData {
      repeated .Data.LandMessage.JobCensusDataMessage.JobCensusData.JobCensusDataEntry jobData = 1;
      repeated .Data.LandMessage.JobCensusDataMessage.JobCensusData.JobCensusDataEntry jobPremiumData = 2;
      optional uint32 jobDataRandSeed = 3;
      optional uint32 buildingID = 4;
      message JobCensusDataEntry {
        optional uint32 jobID = 1;
        optional uint32 characterID = 2;
        optional uint32 characterInstanceID = 3;
      }
    }
  }
  message DNAMessage {
    repeated .Data.LandMessage.DNAMessage.DNATelemetryEvent dnaSessionEvents = 1;
    repeated .Data.LandMessage.DNAMessage.DNAEventsEvent dnaEventsEvents = 2;
    repeated .Data.LandMessage.DNAMessage.DNATelemetryEvent dnaLifeTimeEvents = 3;
    optional int32 sessionCount = 4;
    message DNATelemetryEvent {
      optional uint32 id = 1;
      optional int64 timestamp = 2;
      repeated .Data.LandMessage.DNAMessage.DNATelemetryEvent.DNATelemetryParam dnaParams = 3;
      optional uint32 sessioncount = 4;
      message DNATelemetryParam {
        optional int32 type = 1;
        optional int32 source = 2;
        optional int32 extra = 3;
      }
    }
    message DNAEventsEvent {
      repeated .Data.LandMessage.DNAMessage.DNATelemetryEvent telemetryEvent = 1;
      optional int32 specialEventID = 2;
    }
  }
  message GroupStorageBundleMessage {
    repeated .Data.LandMessage.GroupStorageBundleMessage.GroupStorageBundle groupStorageBundle = 1;
    message GroupStorageBundle {
      repeated .Data.LandMessage.GroupStorageBundleMessage.GroupStorageBundle.GroupStorageBundleEntryData groupStorageBundleEntryData = 1;
      repeated .Data.LandMessage.GroupStorageBundleMessage.GroupStorageBundle.GroupStorageBundleRoadMap groupStorageBundleRoadMap = 2;
      optional int32 originPosX = 3;
      optional int32 originPosY = 4;
      optional uint64 timestampId = 5;
      message GroupStorageBundleEntryData {
        optional uint32 objectID = 1;
        optional uint32 serverID = 2;
        optional int32 positionX = 3;
        optional int32 positionY = 4;
        optional uint32 flipped = 5;
      }
      message GroupStorageBundleRoadMap {
        optional uint32 subLandID = 1;
        optional uint32 mapDataSizeX = 2;
        optional uint32 mapDataSizeY = 3;
        optional .Data.LandMessage.TerrainData terrainData = 4;
      }
    }
  }
}

message EventMessage {
  optional string id = 1;
  optional string toPlayerId = 2;
  optional string fromPlayerId = 3;
  optional string eventType = 4;
  optional int64 createdAt = 5;
  optional int64 updatedAt = 10;
  optional int64 inc = 6;
  optional .Data.EventMessage.EventData eventData = 7;
  optional string targetEntityId = 8;
  optional bool uniqueEvent = 9;
  message EventData {
    optional int32 buildingInstanceID = 1;
    optional int64 requestTime = 2;
    optional int32 requestType = 3;
    optional .Data.EventMessage.EventData.CharacterGainedData characterGainedData = 4;
    optional .Data.EventMessage.EventData.CharacterLostData characterLostData = 5;
    optional .Data.EventMessage.EventData.StealBuildingEventData stealBuildingEventData = 6;
    optional .Data.EventMessage.EventData.GiftMemorabiliaData giftMemorabiliaData = 7;
    optional .Data.EventMessage.EventData.ShopCollectedData shopCollectedData = 8;
    optional .Data.EventMessage.EventData.VandalismEventData vandalismEventData = 9;
    optional .Data.EventMessage.EventData.SidebarUpdateData sidebarUpdateData = 10;
    optional .Data.EventMessage.EventData.ReturnBuildingData returnBuildingData = 11;
    optional .Data.EventMessage.EventData.PlayScriptData playScriptData = 12;
    optional .Data.EventMessage.EventData.CustomFriendRequestData customFriendRequestData = 13;
    optional .Data.EventMessage.EventData.PlayScriptAtPositionData playScriptAtPositionData = 14;
    optional int32 displayNameLen = 15;
    optional string displayName = 16;
    optional int64 updatedAt = 17;
    optional .Data.EventMessage.EventData.LoseResourcesRequestData loseResourcesRequestData = 18;
    message CharacterGainedData {
      optional uint32 characterID = 1;
    }
    message CharacterLostData {
      optional uint32 characterID = 1;
    }
    message StealBuildingEventData {
      optional uint32 buildingInstanceID = 1;
      optional uint32 buildingID = 2;
      optional .Data.OwnerList ownerList = 3;
    }
    message GiftMemorabiliaData {
      optional int32 setID = 1;
      optional int32 itemID = 2;
    }
    message ShopCollectedData {
      optional uint32 buildingInstanceID = 1;
    }
    message VandalismEventData {
      optional uint32 buildingInstanceID = 1;
      optional bool vandalized = 2;
      optional int32 namelen = 3;
      optional string vandalName = 4;
      optional int64 timeOfVandalism = 5;
    }
    message SidebarUpdateData {
      optional int32 type = 1;
      optional int32 state = 2;
      optional int32 identifier = 3;
      optional int64 updateTime = 4;
    }
    message ReturnBuildingData {
      optional uint32 buildingID = 1;
      optional bool isOwnerList = 2;
      optional .Data.OwnerList ownerList = 3;
    }
    message PlayScriptData {
      optional bool playForFriend = 1;
      optional int32 nameLen = 2;
      optional string name = 3;
      optional int32 packageLen = 4;
      optional string package = 5;
    }
    message CustomFriendRequestData {
      optional uint32 buildingID = 1;
      optional int32 friendNameLen = 2;
      optional string friendName = 3;
      optional int32 actionTypeLen = 4;
      optional string actionType = 5;
      optional bool isBuilding = 6;
    }
    message PlayScriptAtPositionData {
      optional bool playForFriend = 1;
      optional int32 nameLen = 2;
      optional string name = 3;
      optional int32 packageLen = 4;
      optional string package = 5;
      optional int32 xPos = 6;
      optional int32 yPos = 7;
      optional int32 sublandId = 8;
      optional int32 variablesLen = 9;
      optional bytes variables = 10;
    }
    message LoseResourcesRequestData {
      optional .Data.CurrencySaveData resources = 1;
      optional string source = 2;
      optional string friendName = 3;
    }
  }
}

message EventsMessage {
  repeated .Data.EventMessage event = 1;
}

message ExtraLandMessage {
  repeated .Data.ExtraLandMessage.CurrencyDelta currencyDelta = 1;
  repeated .Data.EventMessage event = 2;
  repeated .Data.ExtraLandMessage.PushNotification pushNotification = 3;
  repeated .Data.ExtraLandMessage.CommunityGoalDelta communityGoalDelta = 4;
  repeated .Data.ExtraLandMessage.MatchmakingRegistration matchmakingRegistration = 5;
  repeated .Data.PurchaseRequestMessage.DeviceIds deviceIds = 6;
  optional .Data.PurchaseRequestMessage.ApplicationInfo applicationInfo = 7;
  optional .Data.PurchaseRequestMessage.DeviceInfo deviceInfo = 8;
  message CurrencyDelta {
    optional int32 id = 1;
    optional string reason = 2;
    optional int32 amount = 3;
    optional int64 updatedAt = 4;
    optional string productId = 5;
  }
  message PushNotification {
    optional string id = 1;
    optional string toPlayerId = 2;
    optional int32 scheduledIn = 3;
    optional string templateName = 4;
    optional string message = 5;
  }
  message CommunityGoalDelta {
    optional string category = 1;
    optional int64 amount = 2;
  }
  message MatchmakingRegistration {
    optional string category = 1;
    repeated .Data.NameValue params = 2;
  }
}

message ExtraLandResponse {
  repeated .Data.ExtraLandMessage.CurrencyDelta processedCurrencyDelta = 1;
  repeated .Data.EventMessage processedEvent = 2;
  repeated .Data.EventMessage receivedEvent = 3;
  repeated .Data.ExtraLandResponse.CommunityGoal communityGoal = 4;
  message CommunityGoal {
    optional string category = 1;
    optional int64 progressTotal = 2;
    optional double progressRate = 3;
    repeated int64 awardThresholds = 4;
  }
}

message FriendInteractionParamSet {
  repeated .Data.FriendInteractionParamSet.FriendInteractionParam params = 1;
  message FriendInteractionParam {
    optional string stringKey = 1;
    optional string stringValue = 2;
    optional int32 intKey = 3;
    optional int32 intValue = 4;
  }
}

message KinesisCurrencyDelta {
  repeated .Data.ExtraLandMessage.CurrencyDelta currencyDelta = 1;
  optional string userId = 2;
  optional int64 time = 3;
  optional .Data.CurrencyData oldUserCurrency = 4;
  optional string clientSessionGUID = 5;
}

message ProjectBoardParamSet {
  optional int32 numCompleted = 1;
  optional int64 startedTime = 2;
  repeated .Data.ProjectBoardParamSet.ProjectParam params = 3;
  optional int64 dismissedTime = 4;
  message ProjectParam {
    optional string name = 1;
    optional int32 setID = 2;
    optional .Data.CurrencySaveData cost = 3;
    optional .Data.CurrencySaveData reward = 4;
  }
}

message KinesisLandUpdateMessage {
  optional .Data.LandMessage newLand = 1;
  optional .Data.LandMessage oldLand = 2;
  optional int64 updateTime = 3;
  optional string clientVersion = 4;
  optional string platform = 5;
  optional string endOfSessionGUID = 6;
}

message PowerupMessage {
  repeated .Data.PowerupMessage.PowerupData powerupData = 1;
  message PowerupData {
    optional uint32 entityID = 1;
    optional uint32 powerupTypeID = 2;
    optional int64 timeBeganMS = 3;
    optional int32 stateEnum = 4;
    optional int64 timePausedMS = 5;
  }
}



// source filename: MatchmakingData.proto

message MatchmakingResponseMessage {
  optional .Data.LandMessage matchedUserLand = 1;
  optional .Data.ErrorMessage error = 2;
}



// source filename: OffersData.proto


message OffersResponseMessage {
  repeated .Data.OffersResponseMessage.OfferItem offerItems = 1;
  repeated .Data.OffersResponseMessage.ItemPopularityList popularityRangeList = 2;
  optional .Data.ErrorMessage error = 3;
  repeated .Data.OffersResponseMessage.LevelUpXpOffer levelUpXpOffers = 4;
  repeated .Data.OffersResponseMessage.PriceOverrideOffer priceOverrideOffer = 5;
  message OfferItem {
    optional .Data.OffersResponseMessage.OfferItem.OfferType offerType = 1;
    optional string productId = 2;
    optional .Data.OffersResponseMessage.OfferItem.RecommendationType recommendationType = 3;
    enum OfferType {
      MTX = 1;
      PREMIUM = 2;
      CHARACTER = 3;
      BUILDING = 4;
      CONSUMABLE = 5;
    };
    enum RecommendationType {
      RECOMMEND = 1;
      WATCH = 2;
      NOCONVERT = 3;
    };
  }
  message ItemPopularityList {
    optional string displayName = 1;
    repeated .Data.OffersResponseMessage.ItemPopularityList.PopularItem popularityItemList = 3;
    message PopularItem {
      optional .Data.OffersResponseMessage.ItemPopularityList.PopularItem.Type popularityType = 1;
      optional int32 id = 2;
      optional int32 count = 3;
      enum Type {
        BUILDING = 1;
        CHARACTER = 2;
        CONSUMABLE = 3;
        SKIN = 4;
        UNKNOWN = 5;
      };
    }
  }
  message LevelUpXpOffer {
    optional int32 level = 1;
    optional int32 xpForNextLevel = 2;
    optional int32 donutAwardAmount = 3;
    optional int32 moneyAwardAmount = 4;
    optional .Data.OffersResponseMessage.LevelUpXpOffer.LevelUpRecordType levelUpRecordType = 5;
    enum LevelUpRecordType {
      OFFER = 1;
      CONVERSION_EVENT = 2;
    };
  }
  message PriceOverrideOffer {
    optional .Data.OffersResponseMessage.PriceOverrideOffer.OverrideItemType overrideItemType = 1;
    optional string productId = 2;
    optional .Data.OffersResponseMessage.PriceOverrideOffer.CurrencyPriceType currencyPriceType = 3;
    optional int32 currencyAmount = 4;
    enum OverrideItemType {
      CHARACTER = 1;
      BUILDING = 2;
      CONSUMABLE = 3;
    };
    enum CurrencyPriceType {
      GRIND = 1;
      PREMIUM = 2;
    };
  }
}



// source filename: PurchaseData.proto


message PurchasedItemData {
  optional string productId = 1;
  optional string purchasePrice = 2;
  optional int64 purchaseDate = 3;
}

message CurrencyData {
  optional string id = 1;
  optional int32 vcTotalPurchased = 2;
  optional int32 vcTotalAwarded = 3;
  optional int32 vcBalance = 4;
  optional int64 createdAt = 5;
  optional int64 updatedAt = 6;
  optional int32 unverified = 7;
}

message PurchaseErrorData {
  optional int32 code = 1;
  optional string type = 2;
}

message PurchaseResponseMessage {
  optional .Data.CurrencyData currency = 1;
  repeated .Data.PurchasedItemData purchases = 2;
  optional .Data.PurchaseErrorData error = 3;
  repeated .Data.OrderData orderData = 4;
  repeated .Data.SubscriptionData subscriptions = 5;
}

message PurchaseRequestMessage {
  optional string receipt = 1;
  optional string signedData = 2;
  optional string signature = 3;
  optional .Data.PurchasePlatform platform = 4;
  optional string purchaseToken = 5;
  optional string amazonUserId = 6;
  repeated .Data.PurchaseRequestMessage.PaymentInfo paymentInfo = 7;
  repeated .Data.PurchaseRequestMessage.DeviceIds deviceIds = 8;
  optional .Data.PurchaseRequestMessage.ApplicationInfo applicationInfo = 9;
  optional .Data.PurchaseRequestMessage.DeviceInfo deviceInfo = 10;
  optional string synergySystemVersion = 11;
  optional bool isSubscription = 12;
  message PaymentInfo {
    optional string transactionId = 1;
    optional string purchasePrice = 2;
    optional string currencyCode = 3;
  }
  message DeviceIds {
    optional .Data.DeviceId type = 1;
    optional string id = 2;
  }
  message ApplicationInfo {
    optional int64 timestamp = 1;
    optional string bundleId = 2;
    optional string appName = 3;
    optional string appVersion = 4;
    optional string appLanguage = 5;
    optional string countryCode = 6;
    optional string facebookAppId = 7;
    optional string facebookAttributionId = 8;
  }
  message DeviceInfo {
    optional string systemName = 1;
    optional bool limitAdTracking = 2;
    optional string deviceNativeId = 3;
    optional string deviceType = 4;
    optional bool iadAttribution = 5;
    optional string imei = 6;
  }
}

message OrderData {
  optional string notificationId = 1;
  optional string orderId = 2;
  optional .Data.OrderData.OrderState state = 3 [default = IGNORED];
  optional .Data.PurchasePlatform platform = 4;
  optional string purchaseToken = 5;
  optional string signedData = 6;
  enum OrderState {
    VALID = 0;
    IGNORED = 1;
    FAILED = 2;
  };
}

message SubscriptionData {
  optional string subscriptionId = 1;
  optional string purchaseId = 2;
  optional .Data.PurchasePlatform platform = 3;
  optional int64 purchaseDate = 4;
  optional int64 validationDate = 5;
}

enum PurchasePlatform {
  ITUNES = 0;
  GOOGLEPLAY_V2 = 1;
  GOOGLEPLAY_V3 = 2;
  AMAZON = 3;
  ITUNES_GRAND_UNIFIED_RECEIPT = 4;
  NOKIA_NORMANDY = 5;
  AMAZON_V2 = 6;
};

enum DeviceId {
  EA_DEVICE_ID = 0;
  AUT = 1;
  ADVERTISER_ID = 2;
  VENDOR_ID = 3;
  ANDROID_ID = 4;
  MAC_HASH = 5;
};



// source filename: WholeLandTokenData.proto


message WholeLandTokenRequest {
  optional string requestId = 1;
}

message WholeLandTokenResponse {
  optional string token = 1;
  optional bool conflict = 2;
}

message DeleteTokenRequest {
  optional string token = 1;
}

message DeleteTokenResponse {
  optional bool result = 1;
}



